# -*- coding: utf-8 -*-
"""TFF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GxUszPQRFmBFhRkTe07L2KLtbYppf6i9
"""

# Commented out IPython magic to ensure Python compatibility.
#@test {"skip": true}

# tensorflow_federated_nightly also bring in tf_nightly, which
# can causes a duplicate tensorboard install, leading to errors.
# !pip uninstall --yes tensorboard tb-nightly

# !pip install --quiet --upgrade tensorflow-federated
# !pip install --quiet --upgrade nest-asyncio
# !pip install --quiet --upgrade tensorboard  # or tb-nightly, but not both


import nest_asyncio
nest_asyncio.apply()

# %load_ext tensorboard

import collections

import numpy as np
import random
import time
import json, ast
import pickle
import tensorflow as tf
import tensorflow_federated as tff

tff.federated_computation(lambda: 'Hello, World!')()

"""## Conduct local worker/client training

#### Define parameters & preprocess data funstion
"""

NUM_CLIENTS = 34
NUM_ROUNDS = 1
NUM_EPOCHS = 5
BATCH_SIZE = 20
SHUFFLE_BUFFER = 100
PREFETCH_BUFFER = 10

#***********Create functions to preprocess & make federated data***********#
def preprocess(dataset):

  def batch_format_fn(element):
    """Flatten a batch `pixels` and return the features as an `OrderedDict`."""
    return collections.OrderedDict(
        x=tf.reshape(element['pixels'], [-1, 784]),
        y=tf.reshape(element['label'], [-1, 1]))

  return dataset.repeat(NUM_EPOCHS).shuffle(SHUFFLE_BUFFER).batch(
      BATCH_SIZE).map(batch_format_fn).prefetch(PREFETCH_BUFFER)

def make_federated_data(client_data, client_ids):
  return [
      preprocess(client_data.create_tf_dataset_for_client(x))
      for x in client_ids
  ]

"""### Data Split

#### Split the FEMNIST dataset into **train set(90%)** and **test set(10%)**
"""

#***********Split the FEMNIST dataset into train set and test set***********#
emnist_train, emnist_test = tff.simulation.datasets.emnist.load_data()

"""#### Figuring out how many classes there are in total

"""

def all_classes(dataset):
  dataset_client = dataset.create_tf_dataset_for_client(
    dataset.client_ids[0])
  num_data_client = len(dataset_client)
  client_dataset = []
  for n in range(num_data_client):
    client_dataset.append(list(dataset_client.as_numpy_iterator())[n]['label'])
  all_classes = np.unique(client_dataset)
  return all_classes

def train_data_client(client_id):
    train_data_client = emnist_train.create_tf_dataset_for_client(client_id)
    # num_data_client = len(train_data_client)
    return train_data_client

"""#### Filter, Shuffle&Split the train set(90%) for each client

Then for each client in the **train set(90%)**, split that client's data into *train set*(80%) and *validationulimit -Sn unlimitedset*(20%). In each client, the *train set*(80%) are used to train it's local model, the *validation set*(20%) are used to evaluate local model's performance to decide whether stop or continue training local models
"""

#*******looping through all the clients, filter all the classes in each iteration, shuffle&split the data*******#
def make_shuffled_federated_train_validation_data(emnist_train, sample_clients):
  federated_train_train = []
  federated_validation_train = []
  for i,client_id in enumerate(sample_clients):
    for j,c in enumerate(all_classes(emnist_train)):
      #Gather data with class labels 0-9 separately
      globals()[f'class{c}_dataset'] = train_data_client(client_id).filter(lambda data: data['label']==c)
      #Shuffle them
      globals()[f'class{c}_dataset'] = globals()[f'class{c}_dataset'].shuffle(len(train_data_client(client_id)))
      #Split them
      train_len = int(len(list(globals()[f'class{c}_dataset'].as_numpy_iterator()))*0.8)
      globals()[f'class{c}_train'] = globals()[f'class{c}_dataset'].take(train_len)
      globals()[f'class{c}_validation'] = globals()[f'class{c}_dataset'].skip(train_len)
      # Gather datasets
      if j == 0:
        emnist_train_client = globals()[f'class{all_classes(emnist_train)[j]}_train']
        emnist_validation_client = globals()[f'class{all_classes(emnist_train)[j]}_validation']
      elif j > 0:
        emnist_train_client = emnist_train_client.concatenate(globals()[f'class{c}_train']).shuffle(len(train_data_client(client_id)))
        emnist_validation_client = emnist_validation_client.concatenate(globals()[f'class{c}_validation']).shuffle(len(train_data_client(client_id)))

    train_data_client_len = len(list(emnist_train_client.as_numpy_iterator()))
    validation_data_client_len = len(list(emnist_validation_client.as_numpy_iterator()))
    print(f'client {client_id} | total_num_data: {len(train_data_client(client_id))} \t train_num: {train_data_client_len} \t validation_num: {validation_data_client_len}')

    #***********Transform/preprocess the train&validation data of all clients into federated type x(where x is an int represents the value of digit) and y(where y is a 1D 784 pixel values for this digit)***********#
    federated_train_train.append(preprocess(emnist_train_client))
    federated_validation_train.append(preprocess(emnist_validation_client))

  return federated_train_train, federated_validation_train

"""#### Filter, Shuffle&Split the train set(90%) for each client(alternative implementation)"""

def make_shuffled_federated_train_validation_data(emnist_train, sample_clients):
  federated_train_train = []
  federated_validation_train = []

  for i,client_id in enumerate(sample_clients):
    for j,c in enumerate(all_classes(emnist_train)):
      #Gather data with class labels 0-9 separately
      class_dataset = train_data_client(client_id).filter(lambda data: data['label']==c)
      #Shuffle them
      class_dataset = class_dataset.shuffle(len(train_data_client(client_id)))
      #Split them
      train_len = int(len(list(class_dataset.as_numpy_iterator()))*0.8)
      class_train = class_dataset.take(train_len)
      class_validation = class_dataset.skip(train_len)
      # Gather datasets
      if j==0:
        emnist_train_client = class_train
        emnist_validation_client = class_validation
      elif j > 0:
        emnist_train_client = emnist_train_client.concatenate(class_train).shuffle(len(train_data_client(client_id)))
        emnist_validation_client = emnist_validation_client.concatenate(class_validation).shuffle(len(train_data_client(client_id)))

    train_data_client_len = len(list(emnist_train_client.as_numpy_iterator()))
    validation_data_client_len = len(list(emnist_validation_client.as_numpy_iterator()))
    print(f'client {client_id} | total_num_data: {len(train_data_client(client_id))} \t train_num: {train_data_client_len} \t validation_num: {validation_data_client_len}')

    #***********Transform/preprocess the train&validation data of all clients into federated type x(where x is an int represents the value of digit) and y(where y is a 1D 784 pixel values for this digit)***********#
    federated_train_train.append(preprocess(emnist_train_client))
    federated_validation_train.append(preprocess(emnist_validation_client))

  return federated_train_train, federated_validation_train

"""#### Split the train set(90%) in order for each client"""

#*****Iterate over all 3383 clients' train data and split each client's train set into train(80%) and validation(20%) set, then store them into list according to the order of clients respectively*****#
def make_federated_train_validation_data(emnist_train, sample_clients):
  federated_train_train = []
  federated_validation_train = []
  for n,client_id in enumerate(sample_clients):
    #***********Get 1 client's data from train set***********#
    client_dataset = emnist_train.create_tf_dataset_for_client(client_id)
    num_data_client = len(client_dataset)
    #***********Split 1 client's data into 80% train & 20% validation***********#
    emnist_train_client = client_dataset.take(int(num_data_client*0.8))
    # print(emnist_train_client)
    emnist_validation_client = client_dataset.skip(int(num_data_client*0.8))
    print(f'client {client_id} | total_num_data: {num_data_client} \t train_num: {len(emnist_train_client)} \t validation_num: {len(emnist_validation_client)}')
    
    #***********Transform/preprocess the train&validation data of all clients into x(where x is an int represents the value of digit) and y(where y is a 1D 784 pixel values for this digit)***********#
    federated_train_train.append(preprocess(emnist_train_client))
    federated_validation_train.append(preprocess(emnist_validation_client))


  return federated_train_train, federated_validation_train

"""#### Split the test set(10%) into 20% validation set and 80% test set for all clients

Finally split **test set(10%)** into *20% validation set* and *80% test set*. The *20% validation set* are used for selective aggregation(aka if we select a particular client's model update for aggregation or not based on it's performance such as accuracy/loss), the *80% test set* are left as they are from the original test set to measure the efficacy before&after the selective aggregation
"""

def make_federated_test_validation_data(emnist_test):
  #iterate over all 3383 clients' test data and split all clients' test set into test(80%) and validation(20%) set, then store them into list according to the order of clients respectively
  emnist_test_all_clients = emnist_test.create_tf_dataset_from_all_clients() #produces a dataset that contains all examples from a single client in order
  num_test_data = len(list(emnist_test_all_clients.as_numpy_iterator()))
  #Shuffle them
  emnist_test_all_clients = emnist_test_all_clients.shuffle(num_test_data)
  #Split them
  federated_validation_test = emnist_test_all_clients.take(int(num_test_data*0.2))
  federated_test_test = emnist_test_all_clients.skip(int(num_test_data*0.2))
  num_validation_test = len(list(federated_validation_test.as_numpy_iterator()))
  num_test_test = len(list(federated_test_test.as_numpy_iterator()))
  print(f'all clients => signle client | num_test_data: {num_test_data} \t num_test_test: {num_test_test} \t num_validation_test: {num_validation_test}')
    
  #***********Transform/preprocess the test&validation data of all clients into x(where x is an int represents the value of digit) and y(where y is a 1D 784 pixel values for this digit)***********#
  federated_validation_test = list(preprocess(federated_validation_test))
  federated_test_test = list(preprocess(federated_test_test))

  return federated_validation_test, federated_test_test

# federated_validation_test, federated_test_test = make_federated_test_validation_data(emnist_test)

"""### Select random sample clients and make federated traing data"""

#Simulate random sampling, sample a random subset of the clients to be involved in each round of training, generally different in each round
# np.random.seed(0)
#----random set of clients across traning rounds----#
# sample_clients = random.choices(emnist_train.client_ids, k=NUM_CLIENTS)
# or
# sample_clients = random.sample(emnist_train.client_ids, NUM_CLIENTS)

#----same set of clients across traning rounds----#
# sample_clients = emnist_train.client_ids[0:NUM_CLIENTS]

# federated_train_data = make_federated_data(emnist_train, sample_clients)
# print(federated_train_data)

# split the main train(90%) set into train(80%) and validation(20%) set for sampled clients
# federated_train_train, federated_validation_train = make_shuffled_federated_train_validation_data(emnist_train,sample_clients)
# print(federated_train_train, federated_validation_train)

# split the main test(10%) set into validation(20%) and test(80%) set for sampled clients
federated_validation_test, federated_test_test = make_federated_test_validation_data(emnist_test)


"""### Creating a model with Keras(`tf.keras.Model`)

"""

def create_keras_model():
  return tf.keras.models.Sequential([
      tf.keras.layers.Input(shape=(784,)),
      tf.keras.layers.Dense(10, kernel_initializer='zeros'),
      tf.keras.layers.Softmax(),
  ])

def model_fn():
  # We _must_ create a new model here, and _not_ capture it from an external
  # scope. TFF will call this within different graph contexts.
  keras_model = create_keras_model()
  return tff.learning.from_keras_model(
      keras_model,
      input_spec=federated_train_train[0].element_spec,
      loss=tf.keras.losses.SparseCategoricalCrossentropy(),
      metrics=[tf.keras.metrics.SparseCategoricalAccuracy()])

"""### Creating & Customizing the model implementation with `tff.learning.Model `

#### Defining model variables, forward pass, and metrics
"""

MnistVariables = collections.namedtuple(
    'MnistVariables', 'weights bias num_examples loss_sum accuracy_sum')

def create_mnist_variables():
  return MnistVariables(
      weights=tf.Variable(
          lambda: tf.zeros(dtype=tf.float32, shape=(784, 10)),
          name='weights',
          trainable=True),
      bias=tf.Variable(
          lambda: tf.zeros(dtype=tf.float32, shape=(10)),
          name='bias',
          trainable=True),
      num_examples=tf.Variable(0.0, name='num_examples', trainable=False),
      loss_sum=tf.Variable(0.0, name='loss_sum', trainable=False),
      accuracy_sum=tf.Variable(0.0, name='accuracy_sum', trainable=False))

def mnist_forward_pass(variables, batch):
  y = tf.nn.softmax(tf.matmul(batch['x'], variables.weights) + variables.bias)
  predictions = tf.cast(tf.argmax(y, 1), tf.int32)

  flat_labels = tf.reshape(batch['y'], [-1])
  loss = -tf.reduce_mean(
      tf.reduce_sum(tf.one_hot(flat_labels, 10) * tf.math.log(y), axis=[1]))
  accuracy = tf.reduce_mean(
      tf.cast(tf.equal(predictions, flat_labels), tf.float32))

  num_examples = tf.cast(tf.size(batch['y']), tf.float32)

  variables.num_examples.assign_add(num_examples)
  variables.loss_sum.assign_add(loss * num_examples)
  variables.accuracy_sum.assign_add(accuracy * num_examples)

  return loss, predictions

def get_local_mnist_metrics(variables):
  return collections.OrderedDict(
      num_examples=variables.num_examples,
      loss=variables.loss_sum / variables.num_examples,
      accuracy=variables.accuracy_sum / variables.num_examples)

@tff.federated_computation
def aggregate_mnist_metrics_across_clients(metrics):
  return collections.OrderedDict(
      num_examples=tff.federated_sum(metrics.num_examples),
      loss=tff.federated_mean(metrics.loss, metrics.num_examples),
      accuracy=tff.federated_mean(metrics.accuracy, metrics.num_examples))

"""#### Constructing an instance of `tff.learning.Model`"""

class MnistModel(tff.learning.Model):

  def __init__(self):
    self._variables = create_mnist_variables()

  @property
  def trainable_variables(self):
    return [self._variables.weights, self._variables.bias]

  @property
  def non_trainable_variables(self):
    return []

  @property
  def local_variables(self):
    return [
        self._variables.num_examples, self._variables.loss_sum,
        self._variables.accuracy_sum
    ]

  @property
  def input_spec(self):
    return collections.OrderedDict(
        x=tf.TensorSpec([None, 784], tf.float32),
        y=tf.TensorSpec([None, 1], tf.int32))

  @tf.function
  def forward_pass(self, batch, training=True):
    del training
    loss, predictions = mnist_forward_pass(self._variables, batch)
    num_exmaples = tf.shape(batch['x'])[0]
    return tff.learning.BatchOutput(
        loss=loss, predictions=predictions, num_examples=num_exmaples)

  @tf.function
  def report_local_outputs(self):
    return get_local_mnist_metrics(self._variables)

  @property
  def federated_output_computation(self):
    return aggregate_mnist_metrics_across_clients

"""### Local federated training with the Keras model"""

# iterative_process = tff.learning.build_federated_averaging_process(
#     model_fn,
#     client_optimizer_fn=lambda: tf.keras.optimizers.SGD(learning_rate=0.02),
#     server_optimizer_fn=lambda: tf.keras.optimizers.SGD(learning_rate=1.0), model_update_aggregation_factory=tff.aggregators.MeanFactory())

# accuracy_client_keras = []
# for n in range(len(sample_clients)):
#   state = iterative_process.initialize()
#   state, metrics = iterative_process.next(state, federated_train_train)
#   print('round  1, metrics={}'.format(metrics))
#   for round_num in range(2, NUM_ROUNDS+1):
#     state, metrics = iterative_process.next(state, federated_train_train)
#     print('round {:2d}, metrics={}'.format(round_num, metrics))
#   accuracy_client_keras.append(metrics['train']['sparse_categorical_accuracy'])

# print(accuracy_client_keras)

# print(model_fn().trainable_variables[0].numpy)
# print(model_fn().report_local_outputs())
# m = MnistModel()
# print(m.trainable_variables)
# print(m.report_local_outputs())

"""### Local federated training with the Mnist model"""

iterative_process = tff.learning.build_federated_averaging_process(
    MnistModel,
    client_optimizer_fn=lambda: tf.keras.optimizers.SGD(learning_rate=0.02),
    server_optimizer_fn=lambda: tf.keras.optimizers.SGD(learning_rate=1))

local_clients_accuracy = [[] for i in range(NUM_CLIENTS)]
global_accuracy = []

start_time = time.time()

sample_clients = np.random.choice(emnist_train.client_ids, NUM_CLIENTS)
federated_train_train, federated_validation_train = make_shuffled_federated_train_validation_data(emnist_train,sample_clients)

state = iterative_process.initialize()
state, metrics = iterative_process.next(state, federated_train_train)
# model_weights = iterative_process.get_model_weights(state)

evaluation = tff.learning.build_federated_evaluation(MnistModel)
global_validation_metrics = evaluation(state.model, [federated_validation_test])
print('round  1, global_accuracy={}'.format(global_validation_metrics['accuracy']))
global_accuracy.append(global_validation_metrics['accuracy']) #
for n,client in enumerate(sample_clients):
  local_validation_metrics = evaluation(state.model, [federated_validation_train[n]])
  print(f"client \'{client}\' | local_validation_accuracy: ",local_validation_metrics['accuracy'])
  local_clients_accuracy[n].append(local_validation_metrics['accuracy']) #

for round_num in range(2, NUM_ROUNDS+1):
  sample_clients = np.random.choice(emnist_train.client_ids, NUM_CLIENTS)
  federated_train_train, federated_validation_train = make_shuffled_federated_train_validation_data(emnist_train,sample_clients)

  state, metrics = iterative_process.next(state, federated_train_train)

  global_validation_metrics = evaluation(state.model, [federated_validation_test])
  global_accuracy.append(global_validation_metrics['accuracy']) #
  print('round {:2d}, global_accuracy={}'.format(round_num, global_validation_metrics['accuracy']))
  for n,client in enumerate(sample_clients):
    local_validation_metrics = evaluation(state.model, [federated_validation_train[n]])
    local_clients_accuracy[n].append(local_validation_metrics['accuracy']) #
    print(f"client \'{client}\' | local_validation_accuracy: ",local_validation_metrics['accuracy'])


stop_time = time.time()
print(f'finished training in {stop_time - start_time}s')

#-----get sampled_clients stored in a .json file-----#
with open(f"metrics/{NUM_CLIENTS}_clients_{NUM_ROUNDS}_rounds_{NUM_EPOCHS}_epochs.json", 'w') as f:
    # indent=2 is not needed but makes the file human-readable
    json.dump(str(sample_clients), f, indent=2) 
with open(f"metrics/{NUM_CLIENTS}_clients_{NUM_ROUNDS}_rounds_{NUM_EPOCHS}_epochs.json", 'r') as f:
    sample_clients = json.load(f)
    sample_clients = sample_clients.replace(" ",",")
    sample_clients = ast.literal_eval(sample_clients)
    
#-----training NUM_ROUNDS to get clients' local accuracy list stored in a .txt file-----#
with open(f"metrics/{NUM_CLIENTS}_clients_{NUM_ROUNDS}_rounds_{NUM_EPOCHS}_epochs_accuracy_local.txt","wb") as fp: #pickling
    pickle.dump(local_clients_accuracy,fp)
with open(f"metrics/{NUM_CLIENTS}_clients_{NUM_ROUNDS}_rounds_{NUM_EPOCHS}_epochs_accuracy_local.txt","rb") as fp: #unpickling
    local_clients_accuracy = pickle.load(fp)

#-----training NUM_ROUNDS to get clients' local accuracy list stored in a .json file-----#
# with open(f"metrics/{NUM_CLIENTS}_clients_{NUM_ROUNDS}_rounds_{NUM_EPOCHS}_epochs_accuracy_local.json", 'w') as f:
#     # indent=2 is not needed but makes the file human-readable
#     json.dump(str(local_clients_accuracy), f, indent=2) 
# with open(f"metrics/{NUM_CLIENTS}_clients_{NUM_ROUNDS}_rounds_{NUM_EPOCHS}_epochs_accuracy_local.json", 'r') as f:
#     local_clients_accuracy = json.loads(json.load(f))
#     # local_clients_accuracy = ast.literal_eval(json.load(f))

#-----training NUM_ROUNDS to get gloal accuracy list stored in a .txt file-----#
with open(f"metrics/{NUM_CLIENTS}_clients_{NUM_ROUNDS}_rounds_{NUM_EPOCHS}_epochs_accuracy_global.txt","wb") as fp: #pickling
    pickle.dump(global_accuracy,fp)
with open(f"metrics/{NUM_CLIENTS}_clients_{NUM_ROUNDS}_rounds_{NUM_EPOCHS}_epochs_accuracy_global.txt","rb") as fp: #unpickling
    global_accuracy = pickle.load(fp)

# Commented out IPython magic to ensure Python compatibility.
#-----------------Plot the histogram of the distribution of local training accuracy for all clients--------------------##
# from matplotlib import pyplot as plt

# plt.figure(figsize=(13, 8), dpi=100)100%
# # %matplotlib inline
# # plt.rcParams.update({'figure.figsize':(10,6), 'figure.dpi':100})

# # Plot Histogram on accuracy_client
# # plt.hist(accuracy_client_keras, bins=np.arange(0,1,0.005))
# # plt.gca().set(title='Frequency Histogram-Train Accuracy', ylabel='Frequency(Number of clients)', xlabel='Accuracy')
# # plt.show()

# #-----------------Plot the line graphs of the local training accuracy for all clients vs num_rounds & global accuracy & loss vs num_rounds --------------------##
# num_rounds = np.arange(1,NUM_ROUNDS+1)
# # plot local accuracy & loss for all training rounds accross all the clients
# for n,client in enumerate(sample_clients):
#   plt.plot(num_rounds, local_clients_accuracy[n], label=f"client_{client}")
# plt.legend(prop={'size':10})
# plt.title(f'Local validation accuracy - {NUM_ROUNDS} rounds, {NUM_CLIENTS} clients', size=25)
# plt.xlabel('rounds',size=20)
# plt.ylabel('accuracy',size=20)
# plt.show()
# # plot global accuracy & loss for all training rounds
# plt.plot(num_rounds, global_accuracy)
# plt.xlabel('rounds',size=15)
# plt.ylabel('accuracy',size=15)
# plt.title(f'Global validation accuracy - {NUM_ROUNDS} rounds, {NUM_CLIENTS} clients',size=15)
# plt.show()

# fig, (ax1, ax2) = plt.subplots(1, 2)
# fig.suptitle('Global Loss & Accuracy')
# ax1.plot(num_rounds, global_accuracy)
# ax1.set_title('Global accuracy')
# ax2.set_title('Global loss')

"""### Local evaluation"""

evaluation = tff.learning.build_federated_evaluation(MnistModel)

train_metrics = evaluation(state.model, [federated_train_train[0]])
print(f"client \'{sample_clients[0]}\' | train_metrics: {str(train_metrics)}")

validation_metrics = evaluation(state.model, [federated_validation_train[0]])
print(f"client \'{sample_clients[0]}\' | validation_metrics: ",str(validation_metrics))

"""# Aggregation """

@tff.federated_computation(tff.type_at_clients(tf.float32))
def get_average_temperature(sensor_readings):
  return tff.federated_mean(sensor_readings)

str(get_average_temperature.type_signature)

get_average_temperature([68.0, 70.0])

@tff.tf_computation(tff.SequenceType(tf.float32))
def get_local_temperature_average(local_temperatures):
  sum_and_count = (
      local_temperatures.reduce((0.0, 0), lambda x, y: (x[0] + y, x[1] + 1)))
  return sum_and_count[0] / tf.cast(sum_and_count[1], tf.float32)

@tff.federated_computation(
    tff.type_at_clients(tff.SequenceType(tf.float32)))
def get_global_temperature_average(sensor_readings):
  return tff.federated_mean(
      tff.federated_map(get_local_temperature_average, sensor_readings))

print(str(get_average_temperature.type_signature))
get_global_temperature_average([[68.0, 70.0]])

@tff.federated_computation(
    tff.type_at_server(tf.float32))
def broadcast_global_model(state):
  return tff.federated_broadcast(state)

print(str(broadcast_global_model.type_signature))

